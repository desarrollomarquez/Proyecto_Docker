
#############################################################################################
DOCKERIZAR APPS
#############################################################################################
IMAGE NGINX

Ejecute el siguiente comando para obtener la imagenes de Postgres9.5, Odoo y Nginx:


$ docker pull postgres:9.5
$ docker pull odoo:10
$ docker pull nginx

Muestra informaciones de bajo nivel del contenedor o la imagen:


$ docker inspect naughty_morse

$ docker inspect naughty_morse | grep IPAddress

Exporta el contenido del sistema de archivo de un contenedor a un archivo tar

$ docker export naughty_morse > kalicont.tar

$ docker export -o kalicont.tar naughty_morse

Detiene un contenedor enviando un SIGKILL.

$ docker kill naughty_morse

Ejecuta los siguientes comandos para crear los contenedores:

docker run -d -e POSTGRES_USER=odoo -e POSTGRES_PASSWORD=odoo --name db postgres:9.5
docker run -p 8069:8069 --name odoo  --link db:db -t odoo:10
docker run --name docker-nginx -d  -p 80:80 -i -t nginx

docker run -v /home/diego/Documentos/Repositorios/dataentropia/:/etc/ -p 8069:8069 --name odoo --link db:db -t odoo
/home/diego/Documentos/Repositorios/dataentropia/etc
#############################################################################################
VPS
#############################################################################################

docker run -p 8069:8069 --name odoo  --link db:db -t odoo:10

ssh -p  root@167.114.131.127


[Service]
Environment="HTTP_PROXY=http://icaro.dataentropia.com:80" HTTPS_PROXY=http://icaro.dataentropia.com:80"

[Service]
Environment="HTTPS_PROXY=http://icaro.dataentropia.com:80"

icaro.dataentropia.com

docker run hello-world --build-arg HTTP_PROXY="http://icaro.dataentropia.com:80"

[Service]
Environment="HTTP_PROXY=https://icaro.dataentropia.com:8080/"
Environment="HTTPS_PROXY=https://icaro.dataentropia.com:8080/"
Environment="NO_PROXY=localhost,127.0.0.1,localaddress,.localdomain.com"

[Service]
Environment="HTTP_PROXY=https://167.114.131.127:8080/"
Environment="HTTPS_PROXY=https://167.114.131.127:8080/"
Environment="NO_PROXY=localhost,127.0.0.1,localaddress,.localdomain.com"


export http_proxy="http://icaro.dataentropia.com:8080/"

dockerd --debug \
  --tls=true \
  --tlscert=/var/docker/server.pem \
  --tlskey=/var/docker/serverkey.pem \
  --host tcp://167.114.131.127:2376

- versiones de docker en centos: 

rpm -qa |grep docker

- remover docker de centos:

sudo yum remove docker docker-common docker-selinux docker-engine

- Listamos los paquetes:

yum list installed | grep docker

- Borramos los paquetes:

sudo yum -y remove docker-engine.x86_64

- Borrar las imágenes y los contenedores:

rm -rf /var/lib/docker


# Generated by NetworkManager
search dataentropia.com

#Google Public DNS
nameserver 8.8.8.8
nameserver 8.8.4.4
nameserver 1.1.1.1
nameserver 1.0.0.1

#OpenDNS
nameserver 87.98.146.77
nameserver 178.33.114.106
nameserver 192.232.213.125




cambiar firewall centos:

firewall-cmd --zone=public --add-port=8080/tcp --permanent

reload cambios:

firewall-cmd --reload

docker run --name docker-nginx -d  -p http://167.114.131.127:8080 -p https://167.114.131.127:8080 -i -t nginx

docker run --name nginx --env http_proxy=http://icaro.dataentropia.com:8080/ --env https_proxy=https://icaro.dataentropia.com:8080/







###############################################################################################################################
mv /etc/systemd/system/docker.service.d/http-proxy.conf  /etc/systemd/system/docker.service.d/http-proxy.conf.bck
systemctl daemon-reload
systemctl restart docker
Nota//: Dejar el proxy vacio....
#############################################################################################

docker network create saas-demo-network

docker run --name odoo-nginx -d  -p 8080:80 --network saas-demo-network -i -t nginx


# Backup
docker exec CONTAINER /usr/bin/mysqldump -u root --password=root DATABASE > backup.sql

# Restore
cat backup.sql | docker exec -i CONTAINER /usr/bin/mysql -u root --password=root DATABASE

#############################################################################################

Creé dos contenedores Docker. El primero proporciona un registro privado de Docker y el segundo es un espejo del registro oficial de Docker:

docker run -d --name registry -v /local/path/to/registry:/registry -e SETTINGS_FLAVOR=local -e STORAGE_PATH=/registry -p 5000:5000 registry

docker run -d --name mirror -v /local/path/to/mirror:/registry -e STORAGE_PATH=/registry -e STANDALONE=false -e MIRROR_SOURCE=https:/registry-1.docker.io -e MIRROR_SOURCE_INDEX=https://index.docker.io -p 5555:5000 registry

#############################################################################################
DOCKER -WORDPRESS
#############################################################################################

Ejecute este comando para descargar la última versión de Docker Compose:

sudo curl -L "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

sudo mount /tmp -o remount,exec

docker-compose --version


crear docker-compose para word-press:

version: '3.3'
services:
   db:
     image: mysql:5.7
     volumes:
       - db_data:/var/lib/mysql
     restart: always
     environment:
       MYSQL_ROOT_PASSWORD: somewordpress
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD: wordpress

   wordpress:
     depends_on:
       - db
     image: wordpress:latest
     ports:
       - "8000:80"
     restart: always
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD: wordpress
volumes:
    db_data:

Ejecutar el composer...

docker-compose up -d

#############################################################################################
DOCKER - RASPBERRY
#############################################################################################

curl -sSL https://get.docker.com |sh

$ uname -a
Linux 4.4.0-21-generic #37-Ubuntu SMP Mon Apr 18 18:33:37 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux



curl -sSL https://get.docker.com |sh

#############################################################################################




127.0.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
172.17.0.4	5e0237f35f23


127.0.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
172.17.0.2	db c22daad13308
172.17.0.3	cfa1b1fb794c

docker run -v /home/diego/Documentos/Repositorios/dataentropia/etc/hosts:/etc/hosts -p 8069:8069 --name odoo --link db:db -t odoo:10



